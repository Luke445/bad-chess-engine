#include <vector>
#include <iostream>
#include "Board.h"

using namespace std;


const char startingBoard[64] = {
    blackRook, blackKnight, blackBishop, blackQueen, blackKing, blackBishop, blackKnight, blackRook,
    blackPawn, blackPawn,   blackPawn,   blackPawn,  blackPawn, blackPawn,   blackPawn,   blackPawn,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    whitePawn, whitePawn,   whitePawn,   whitePawn,  whitePawn, whitePawn,   whitePawn,   whitePawn,
    whiteRook, whiteKnight, whiteBishop, whiteQueen, whiteKing, whiteBishop, whiteKnight, whiteRook
};
/*const char startingBoard[64] = {
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     blackKing,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
    noPiece,   noPiece,     noPiece,     noPiece,    noPiece,   noPiece,     noPiece,     noPiece  ,
};*/


const int knightOffsets[8] = {17, 10, -15, -6, 15, 6, -17, -10};
const int kingOffsets[8] = {-9, -8, -7, -1, 1, 7, 8, 9};

/* pre-computed positions for checking if a piece is attacked - generated by move_maker.py */
// sections (separated by -1)
// 0 up left
// 1 up right
// 2 down left
// 3 down right
// 4 up
// 5 left
// 6 right
// 7 down
// 8 knights moves
const int pos0[32] = {1, 2, 3, 11, 9, 18, 27, 36, 45, 54, 63, 12, 20, 1, 2, 3, 4, 5, 6, 7, 21, 29, 8, 16, 24, 32, 40, 48, 56, 32, 17, 10};
const int pos1[33] = {1, 2, 4, 8, 11, 10, 19, 28, 37, 46, 55, 12, 19, 2, 3, 4, 5, 6, 7, 21, 0, 29, 9, 17, 25, 33, 41, 49, 57, 33, 18, 11, 16};
const int pos2[34] = {1, 2, 5, 9, 16, 11, 11, 20, 29, 38, 47, 12, 18, 3, 4, 5, 6, 7, 21, 1, 0, 29, 10, 18, 26, 34, 42, 50, 58, 34, 19, 12, 17, 8};
const int pos3[34] = {1, 2, 6, 10, 17, 24, 11, 12, 21, 30, 39, 12, 17, 4, 5, 6, 7, 21, 2, 1, 0, 29, 11, 19, 27, 35, 43, 51, 59, 34, 20, 13, 18, 9};
const int pos4[34] = {1, 2, 7, 11, 18, 25, 32, 11, 13, 22, 31, 12, 16, 5, 6, 7, 21, 3, 2, 1, 0, 29, 12, 20, 28, 36, 44, 52, 60, 34, 21, 14, 19, 10};
const int pos5[34] = {1, 2, 8, 12, 19, 26, 33, 40, 11, 14, 23, 12, 15, 6, 7, 21, 4, 3, 2, 1, 0, 29, 13, 21, 29, 37, 45, 53, 61, 34, 22, 15, 20, 11};
const int pos6[33] = {1, 2, 9, 13, 20, 27, 34, 41, 48, 11, 15, 12, 14, 7, 21, 5, 4, 3, 2, 1, 0, 29, 14, 22, 30, 38, 46, 54, 62, 33, 23, 21, 12};
const int pos7[32] = {1, 2, 10, 14, 21, 28, 35, 42, 49, 56, 11, 12, 13, 21, 6, 5, 4, 3, 2, 1, 0, 29, 15, 23, 31, 39, 47, 55, 63, 32, 22, 13};
const int pos8[33] = {1, 3, 1, 4, 11, 17, 26, 35, 44, 53, 62, 13, 0, 21, 9, 10, 11, 12, 13, 14, 15, 22, 29, 16, 24, 32, 40, 48, 56, 33, 25, 18, 2};
const int pos9[36] = {2, 0, 4, 2, 6, 16, 13, 18, 27, 36, 45, 54, 63, 15, 1, 22, 10, 11, 12, 13, 14, 15, 24, 8, 31, 17, 25, 33, 41, 49, 57, 36, 26, 19, 3, 24};
const int pos10[38] = {2, 1, 4, 3, 7, 17, 24, 13, 19, 28, 37, 46, 55, 15, 2, 21, 11, 12, 13, 14, 15, 24, 9, 8, 31, 18, 26, 34, 42, 50, 58, 38, 27, 20, 4, 25, 16, 0};
const int pos11[38] = {2, 2, 4, 4, 8, 18, 25, 32, 13, 20, 29, 38, 47, 15, 3, 20, 12, 13, 14, 15, 24, 10, 9, 8, 31, 19, 27, 35, 43, 51, 59, 38, 28, 21, 5, 26, 17, 1};
const int pos12[38] = {2, 3, 4, 5, 9, 19, 26, 33, 40, 13, 21, 30, 39, 15, 4, 19, 13, 14, 15, 24, 11, 10, 9, 8, 31, 20, 28, 36, 44, 52, 60, 38, 29, 22, 6, 27, 18, 2};
const int pos13[38] = {2, 4, 4, 6, 10, 20, 27, 34, 41, 48, 13, 22, 31, 15, 5, 18, 14, 15, 24, 12, 11, 10, 9, 8, 31, 21, 29, 37, 45, 53, 61, 38, 30, 23, 7, 28, 19, 3};
const int pos14[36] = {2, 5, 4, 7, 11, 21, 28, 35, 42, 49, 56, 13, 23, 15, 6, 17, 15, 24, 13, 12, 11, 10, 9, 8, 31, 22, 30, 38, 46, 54, 62, 36, 31, 29, 20, 4};
const int pos15[33] = {2, 6, 3, 10, 22, 29, 36, 43, 50, 57, 11, 13, 7, 14, 22, 14, 13, 12, 11, 10, 9, 8, 29, 23, 31, 39, 47, 55, 63, 33, 30, 21, 5};
const int pos16[34] = {1, 4, 9, 2, 5, 11, 25, 34, 43, 52, 61, 14, 8, 0, 22, 17, 18, 19, 20, 21, 22, 23, 23, 29, 24, 32, 40, 48, 56, 34, 33, 26, 1, 10};
const int pos17[38] = {2, 8, 5, 10, 3, 7, 24, 13, 26, 35, 44, 53, 62, 16, 9, 1, 23, 18, 19, 20, 21, 22, 23, 25, 16, 31, 25, 33, 41, 49, 57, 38, 34, 27, 2, 11, 32, 0};
const int pos18[42] = {3, 9, 0, 6, 11, 4, 9, 25, 32, 15, 27, 36, 45, 54, 63, 18, 10, 2, 24, 19, 20, 21, 22, 23, 27, 17, 16, 33, 26, 34, 42, 50, 58, 42, 35, 28, 3, 12, 33, 24, 1, 8};
const int pos19[42] = {3, 10, 1, 6, 12, 5, 10, 26, 33, 40, 15, 28, 37, 46, 55, 18, 11, 3, 23, 20, 21, 22, 23, 27, 18, 17, 16, 33, 27, 35, 43, 51, 59, 42, 36, 29, 4, 13, 34, 25, 2, 9};
const int pos20[42] = {3, 11, 2, 6, 13, 6, 11, 27, 34, 41, 48, 15, 29, 38, 47, 18, 12, 4, 22, 21, 22, 23, 27, 19, 18, 17, 16, 33, 28, 36, 44, 52, 60, 42, 37, 30, 5, 14, 35, 26, 3, 10};
const int pos21[42] = {3, 12, 3, 6, 14, 7, 12, 28, 35, 42, 49, 56, 15, 30, 39, 18, 13, 5, 21, 22, 23, 27, 20, 19, 18, 17, 16, 33, 29, 37, 45, 53, 61, 42, 38, 31, 6, 15, 36, 27, 4, 11};
const int pos22[38] = {3, 13, 4, 5, 15, 11, 29, 36, 43, 50, 57, 13, 31, 16, 14, 6, 18, 23, 25, 21, 20, 19, 18, 17, 16, 31, 30, 38, 46, 54, 62, 38, 39, 7, 37, 28, 5, 12};
const int pos23[34] = {3, 14, 5, 4, 10, 30, 37, 44, 51, 58, 11, 14, 15, 7, 15, 23, 22, 21, 20, 19, 18, 17, 16, 29, 31, 39, 47, 55, 63, 34, 38, 29, 6, 13};
const int pos24[34] = {1, 5, 17, 10, 3, 6, 11, 33, 42, 51, 60, 15, 16, 8, 0, 23, 25, 26, 27, 28, 29, 30, 31, 24, 29, 32, 40, 48, 56, 34, 41, 34, 9, 18};
const int pos25[38] = {2, 16, 6, 18, 11, 4, 8, 32, 13, 34, 43, 52, 61, 17, 17, 9, 1, 24, 26, 27, 28, 29, 30, 31, 26, 24, 31, 33, 41, 49, 57, 38, 42, 35, 10, 19, 40, 8};
const int pos26[42] = {3, 17, 8, 7, 19, 12, 5, 10, 33, 40, 15, 35, 44, 53, 62, 19, 18, 10, 2, 25, 27, 28, 29, 30, 31, 28, 25, 24, 33, 34, 42, 50, 58, 42, 43, 36, 11, 20, 41, 32, 9, 16};
const int pos27[44] = {4, 18, 9, 0, 8, 20, 13, 6, 12, 34, 41, 48, 17, 36, 45, 54, 63, 21, 19, 11, 3, 26, 28, 29, 30, 31, 30, 26, 25, 24, 35, 35, 43, 51, 59, 44, 44, 37, 12, 21, 42, 33, 10, 17};
const int pos28[44] = {4, 19, 10, 1, 8, 21, 14, 7, 13, 35, 42, 49, 56, 17, 37, 46, 55, 21, 20, 12, 4, 25, 29, 30, 31, 30, 27, 26, 25, 24, 35, 36, 44, 52, 60, 44, 45, 38, 13, 22, 43, 34, 11, 18};
const int pos29[42] = {4, 20, 11, 2, 7, 22, 15, 12, 36, 43, 50, 57, 15, 38, 47, 19, 21, 13, 5, 22, 30, 31, 28, 28, 27, 26, 25, 24, 33, 37, 45, 53, 61, 42, 46, 39, 14, 23, 44, 35, 12, 19};
const int pos30[38] = {4, 21, 12, 3, 6, 23, 11, 37, 44, 51, 58, 13, 39, 17, 22, 14, 6, 19, 31, 26, 29, 28, 27, 26, 25, 24, 31, 38, 46, 54, 62, 38, 47, 15, 45, 36, 13, 20};
const int pos31[34] = {4, 22, 13, 4, 5, 10, 38, 45, 52, 59, 11, 15, 23, 15, 7, 16, 24, 30, 29, 28, 27, 26, 25, 24, 29, 39, 47, 55, 63, 34, 46, 37, 14, 21};
const int pos32[34] = {1, 6, 25, 18, 11, 4, 7, 11, 41, 50, 59, 16, 24, 16, 8, 0, 24, 33, 34, 35, 36, 37, 38, 39, 25, 29, 40, 48, 56, 34, 49, 42, 17, 26};
const int pos33[38] = {2, 24, 7, 26, 19, 12, 5, 9, 40, 13, 42, 51, 60, 18, 25, 17, 9, 1, 25, 34, 35, 36, 37, 38, 39, 27, 32, 31, 41, 49, 57, 38, 50, 43, 18, 27, 48, 16};
const int pos34[42] = {3, 25, 16, 8, 27, 20, 13, 6, 11, 41, 48, 15, 43, 52, 61, 20, 26, 18, 10, 2, 26, 35, 36, 37, 38, 39, 29, 33, 32, 33, 42, 50, 58, 42, 51, 44, 19, 28, 49, 40, 17, 24};
const int pos35[44] = {4, 26, 17, 8, 9, 28, 21, 14, 7, 13, 42, 49, 56, 17, 44, 53, 62, 22, 27, 19, 11, 3, 27, 36, 37, 38, 39, 31, 34, 33, 32, 35, 43, 51, 59, 44, 52, 45, 20, 29, 50, 41, 18, 25};
const int pos36[44] = {5, 27, 18, 9, 0, 9, 29, 22, 15, 13, 43, 50, 57, 17, 45, 54, 63, 22, 28, 20, 12, 4, 26, 37, 38, 39, 31, 35, 34, 33, 32, 35, 44, 52, 60, 44, 53, 46, 21, 30, 51, 42, 19, 26};
const int pos37[42] = {5, 28, 19, 10, 1, 8, 30, 23, 12, 44, 51, 58, 15, 46, 55, 20, 29, 21, 13, 5, 23, 38, 39, 29, 36, 35, 34, 33, 32, 33, 45, 53, 61, 42, 54, 47, 22, 31, 52, 43, 20, 27};
const int pos38[38] = {5, 29, 20, 11, 2, 7, 31, 11, 45, 52, 59, 13, 47, 18, 30, 22, 14, 6, 20, 39, 27, 37, 36, 35, 34, 33, 32, 31, 46, 54, 62, 38, 55, 23, 53, 44, 21, 28};
const int pos39[34] = {5, 30, 21, 12, 3, 6, 10, 46, 53, 60, 11, 16, 31, 23, 15, 7, 17, 25, 38, 37, 36, 35, 34, 33, 32, 29, 47, 55, 63, 34, 54, 45, 22, 29};
const int pos40[34] = {1, 7, 33, 26, 19, 12, 5, 8, 11, 49, 58, 17, 32, 24, 16, 8, 0, 25, 41, 42, 43, 44, 45, 46, 47, 26, 29, 48, 56, 34, 57, 50, 25, 34};
const int pos41[38] = {2, 32, 8, 34, 27, 20, 13, 6, 10, 48, 13, 50, 59, 19, 33, 25, 17, 9, 1, 26, 42, 43, 44, 45, 46, 47, 28, 40, 31, 49, 57, 38, 58, 51, 26, 35, 56, 24};
const int pos42[42] = {3, 33, 24, 9, 35, 28, 21, 14, 7, 12, 49, 56, 15, 51, 60, 21, 34, 26, 18, 10, 2, 27, 43, 44, 45, 46, 47, 30, 41, 40, 33, 50, 58, 42, 59, 52, 27, 36, 57, 48, 25, 32};
const int pos43[42] = {4, 34, 25, 16, 9, 36, 29, 22, 15, 12, 50, 57, 15, 52, 61, 21, 35, 27, 19, 11, 3, 26, 44, 45, 46, 47, 30, 42, 41, 40, 33, 51, 59, 42, 60, 53, 28, 37, 58, 49, 26, 33};
const int pos44[42] = {5, 35, 26, 17, 8, 9, 37, 30, 23, 12, 51, 58, 15, 53, 62, 21, 36, 28, 20, 12, 4, 25, 45, 46, 47, 30, 43, 42, 41, 40, 33, 52, 60, 42, 61, 54, 29, 38, 59, 50, 27, 34};
const int pos45[42] = {6, 36, 27, 18, 9, 0, 9, 38, 31, 12, 52, 59, 15, 54, 63, 21, 37, 29, 21, 13, 5, 24, 46, 47, 30, 44, 43, 42, 41, 40, 33, 53, 61, 42, 62, 55, 30, 39, 60, 51, 28, 35};
const int pos46[38] = {6, 37, 28, 19, 10, 1, 8, 39, 11, 53, 60, 13, 55, 19, 38, 30, 22, 14, 6, 21, 47, 28, 45, 44, 43, 42, 41, 40, 31, 54, 62, 38, 63, 31, 61, 52, 29, 36};
const int pos47[34] = {6, 38, 29, 20, 11, 2, 7, 10, 54, 61, 11, 17, 39, 31, 23, 15, 7, 18, 26, 46, 45, 44, 43, 42, 41, 40, 29, 55, 63, 34, 62, 53, 30, 37};
const int pos48[33] = {1, 8, 41, 34, 27, 20, 13, 6, 9, 11, 57, 18, 40, 32, 24, 16, 8, 0, 26, 49, 50, 51, 52, 53, 54, 55, 27, 29, 56, 33, 58, 33, 42};
const int pos49[36] = {2, 40, 9, 42, 35, 28, 21, 14, 7, 11, 56, 13, 58, 20, 41, 33, 25, 17, 9, 1, 27, 50, 51, 52, 53, 54, 55, 29, 48, 31, 57, 36, 59, 34, 43, 32};
const int pos50[38] = {3, 41, 32, 9, 43, 36, 29, 22, 15, 11, 57, 13, 59, 20, 42, 34, 26, 18, 10, 2, 26, 51, 52, 53, 54, 55, 29, 49, 48, 31, 58, 38, 60, 35, 44, 56, 33, 40};
const int pos51[38] = {4, 42, 33, 24, 9, 44, 37, 30, 23, 11, 58, 13, 60, 20, 43, 35, 27, 19, 11, 3, 25, 52, 53, 54, 55, 29, 50, 49, 48, 31, 59, 38, 61, 36, 45, 57, 34, 41};
const int pos52[38] = {5, 43, 34, 25, 16, 9, 45, 38, 31, 11, 59, 13, 61, 20, 44, 36, 28, 20, 12, 4, 24, 53, 54, 55, 29, 51, 50, 49, 48, 31, 60, 38, 62, 37, 46, 58, 35, 42};
const int pos53[38] = {6, 44, 35, 26, 17, 8, 9, 46, 39, 11, 60, 13, 62, 20, 45, 37, 29, 21, 13, 5, 23, 54, 55, 29, 52, 51, 50, 49, 48, 31, 61, 38, 63, 38, 47, 59, 36, 43};
const int pos54[36] = {7, 45, 36, 27, 18, 9, 0, 9, 47, 11, 61, 13, 63, 20, 46, 38, 30, 22, 14, 6, 22, 55, 29, 53, 52, 51, 50, 49, 48, 31, 62, 36, 39, 60, 37, 44};
const int pos55[33] = {7, 46, 37, 28, 19, 10, 1, 8, 10, 62, 11, 18, 47, 39, 31, 23, 15, 7, 19, 27, 54, 53, 52, 51, 50, 49, 48, 29, 63, 33, 61, 38, 45};
const int pos56[32] = {1, 9, 49, 42, 35, 28, 21, 14, 7, 10, 11, 19, 48, 40, 32, 24, 16, 8, 0, 27, 57, 58, 59, 60, 61, 62, 63, 28, 29, 32, 41, 50};
const int pos57[33] = {2, 48, 9, 50, 43, 36, 29, 22, 15, 10, 11, 19, 49, 41, 33, 25, 17, 9, 1, 26, 58, 59, 60, 61, 62, 63, 28, 56, 29, 33, 42, 51, 40};
const int pos58[34] = {3, 49, 40, 9, 51, 44, 37, 30, 23, 10, 11, 19, 50, 42, 34, 26, 18, 10, 2, 25, 59, 60, 61, 62, 63, 28, 57, 56, 29, 34, 43, 52, 41, 48};
const int pos59[34] = {4, 50, 41, 32, 9, 52, 45, 38, 31, 10, 11, 19, 51, 43, 35, 27, 19, 11, 3, 24, 60, 61, 62, 63, 28, 58, 57, 56, 29, 34, 44, 53, 42, 49};
const int pos60[34] = {5, 51, 42, 33, 24, 9, 53, 46, 39, 10, 11, 19, 52, 44, 36, 28, 20, 12, 4, 23, 61, 62, 63, 28, 59, 58, 57, 56, 29, 34, 45, 54, 43, 50};
const int pos61[34] = {6, 52, 43, 34, 25, 16, 9, 54, 47, 10, 11, 19, 53, 45, 37, 29, 21, 13, 5, 22, 62, 63, 28, 60, 59, 58, 57, 56, 29, 34, 46, 55, 44, 51};
const int pos62[33] = {7, 53, 44, 35, 26, 17, 8, 9, 55, 10, 11, 19, 54, 46, 38, 30, 22, 14, 6, 21, 63, 28, 61, 60, 59, 58, 57, 56, 29, 33, 47, 45, 52};
const int pos63[32] = {8, 54, 45, 36, 27, 18, 9, 0, 9, 10, 11, 19, 55, 47, 39, 31, 23, 15, 7, 20, 28, 62, 61, 60, 59, 58, 57, 56, 29, 32, 46, 53};
const int *moveLookup[64] = {pos0, pos1, pos2, pos3, pos4, pos5, pos6, pos7, pos8, pos9, pos10, pos11, pos12, pos13, pos14, pos15, pos16, pos17, pos18, pos19, pos20, pos21, pos22, pos23, pos24, pos25, pos26, pos27, pos28, pos29, pos30, pos31, pos32, pos33, pos34, pos35, pos36, pos37, pos38, pos39, pos40, pos41, pos42, pos43, pos44, pos45, pos46, pos47, pos48, pos49, pos50, pos51, pos52, pos53, pos54, pos55, pos56, pos57, pos58, pos59, pos60, pos61, pos62, pos63};

Board::Board() {}

void Board::resetBoard() {
    memcpy(b, startingBoard, sizeof(startingBoard));
    isWhitesTurn = true;
    lastMove = {};

    // find position of both kings
    for (int i = 0; i < 64; i++) {
        if (getPos(i) == whiteKing)
            whiteKingPos = i;
        else if (getPos(i) == blackKing)
            blackKingPos = i;
    }

    whiteKingSideCastle = true;
    whiteQueenSideCastle = true;
    blackKingSideCastle = true;
    blackQueenSideCastle = true;
}

void Board::quickCopy(Board *otherBoard) {
    // this only copies board data and not the validMoves buffer
    // only use this if the current validMoves data is not needed

    // copy all board data except for the ending moves vector
    memcpy(this, otherBoard, sizeof(Board) - sizeof(vector<Move>));
    // reset the vector manually
    validMoves = vector<Move>();
}

int Board::doMove(Move m) {
    char piece = getPos(m.from);
    switch (piece) {
        // check for castling
        case whiteKing:
            if (whiteKingSideCastle && m.to == 62) {
                b[61] = whiteRook;
                b[63] = noPiece;
            }
            else if (whiteQueenSideCastle && m.to == 58) {
                b[59] = whiteRook;
                b[56] = noPiece;
            }
            whiteKingPos = m.to;
            whiteKingSideCastle = false;
            whiteQueenSideCastle = false;
            break;
        case blackKing:
            if (blackKingSideCastle && m.to == 6) {
                b[5] = blackRook;
                b[7] = noPiece;
            }
            else if (blackQueenSideCastle && m.to == 2) {
                b[3] = blackRook;
                b[0] = noPiece;
            }
            blackKingPos = m.to;
            blackKingSideCastle = false;
            blackQueenSideCastle = false;
            break;
        case whiteRook:
            if (m.from == 56)
                whiteQueenSideCastle = false;
            else if (m.from == 63)
                whiteKingSideCastle = false;
            break;
        case blackRook:
            if (m.from == 0)
                blackQueenSideCastle = false;
            else if (m.from == 7)
                blackKingSideCastle = false;
            break;
        case whitePawn:
            // en passant
            if ((m.from & 0b111) != (m.to & 0b111) && getPos(m.to) == noPiece)
                b[(3*8) + (m.to & 0b111)] = noPiece;
            // promotion
            if (m.to <= 7) {
                piece = m.flags;
            }
            break;
        case blackPawn:
            // en passant
            if ((m.from & 0b111) != (m.to & 0b111) && getPos(m.to) == noPiece)
                b[(4*8) + (m.to & 0b111)] = noPiece;
            // promotion
            if (m.to >= 56) {
                piece = -(m.flags); // negate the promotion piece to make it black
            }
            break;
    }
    b[m.to] = piece;
    b[m.from] = noPiece;
    isWhitesTurn = !isWhitesTurn;
    lastMove = m;
    validMoves.clear();

    // eval checkmate/stalemate
    int numMoves = getAllValidMoves()->size();

    if (isCheck()) {
        if (numMoves == 0) {
            if (isWhitesTurn)
                return blackWins;
            else
                return whiteWins;
        }
    }
    else {
        // stalemate
        if (numMoves == 0)
            return draw;
    }
    
    return gameNotOver;
}

void Board::quickDoMove(Move m) {
    // does not check for checkmate/stalemate or update castling rights
    // does not update lastMove, isWhitesTurn, or clear validMoves
    // only intended for internal use

    char piece = getPos(m.from);
    switch (piece) {
        // check for castling
        case whiteKing:
            if (whiteKingSideCastle && m.to == 62) {
                b[61] = whiteRook;
                b[63] = noPiece;
            }
            else if (whiteQueenSideCastle && m.to == 58) {
                b[59] = whiteRook;
                b[56] = noPiece;
            }
            whiteKingPos = m.to;
            break;
        case blackKing:
            if (blackKingSideCastle && m.to == 6) {
                b[5] = blackRook;
                b[7] = noPiece;
            }
            else if (blackQueenSideCastle && m.to == 2) {
                b[3] = blackRook;
                b[0] = noPiece;
            }
            blackKingPos = m.to;
            break;
        case whitePawn:
            // en passant
            if ((m.from & 0b111) != (m.to & 0b111) && getPos(m.to) == noPiece)
                b[(3*8) + (m.to & 0b111)] = noPiece;
            // promotion
            if (m.to <= 7) {
                piece = m.flags;
            }
            break;
        case blackPawn:
            // en passant
            if ((m.from & 0b111) != (m.to & 0b111) && getPos(m.to) == noPiece)
                b[(4*8) + (m.to & 0b111)] = noPiece;
            // promotion
            if (m.to >= 56) {
                piece = -(m.flags); // negate the promotion piece to make it black
            }
            break;
    }
    b[m.to] = piece;
    b[m.from] = noPiece;
}

char Board::getPos(int pos) {
    return b[pos];
}

bool Board::isCheck() {
    if (isWhitesTurn) {
        return isWhiteInCheck();
    }
    else {
        return isBlackInCheck();
    }
}

bool Board::isWhiteInCheck() {
    int movesIndex = 0;
    int nextSectionIndex;
    int next;
    char piece;
    int kingPos = whiteKingPos;
    const int *moveArray = moveLookup[kingPos];

    // bishop directions
    for (int i = 0; i < 4; i++) {
        nextSectionIndex = moveArray[movesIndex++]; // next direction
        if (movesIndex == nextSectionIndex)
            continue;
        next = moveArray[movesIndex++];
        piece = getPos(next);
        if (piece != noPiece) {
            if (piece == blackBishop || piece == blackQueen || piece == blackKing) // check first square for king also
                return true;
            movesIndex = nextSectionIndex;
            continue;
        }
        while (movesIndex != nextSectionIndex) {
            next = moveArray[movesIndex++];
            piece = getPos(next);
            if (piece != noPiece) {
                if (piece == blackBishop || piece == blackQueen) // check rest for only bishop and queen
                    return true;
                movesIndex = nextSectionIndex;
                break;
            }
        }
    }

    // rook directions
    for (int i = 0; i < 4; i++) {
        nextSectionIndex = moveArray[movesIndex++]; // next direction
        if (movesIndex == nextSectionIndex)
            continue;
        next = moveArray[movesIndex++];
        piece = getPos(next);
        if (piece != noPiece) {
            if (piece == blackRook || piece == blackQueen || piece == blackKing) // check first square for king also
                return true;
            movesIndex = nextSectionIndex;
            continue;
        }
        while (movesIndex != nextSectionIndex) {
            next = moveArray[movesIndex++];
            piece = getPos(next);
            if (piece != noPiece) {
                if (piece == blackRook || piece == blackQueen) // check rest for only rook and queen
                    return true;
                movesIndex = nextSectionIndex;
                break;
            }
        }
    }

    // knight moves
    nextSectionIndex = moveArray[movesIndex++];
    while (movesIndex != nextSectionIndex) {
        next = moveArray[movesIndex++];
        if (getPos(next) == blackKnight)
            return true;
    }

    // pawn moves
    if ((kingPos & 0b111) != 7) {
        if (getPos(kingPos - 7) == blackPawn)
            return true;
    }
    if ((kingPos & 0b111) != 0) {
        if (getPos(kingPos - 9) == blackPawn)
            return true;
    }

    return false;
}

bool Board::isBlackInCheck() {
    int movesIndex = 0;
    int nextSectionIndex;
    int next;
    char piece;
    int kingPos = blackKingPos;
    const int *moveArray = moveLookup[kingPos];

    // bishop directions
    for (int i = 0; i < 4; i++) {
        nextSectionIndex = moveArray[movesIndex++]; // next direction
        if (movesIndex == nextSectionIndex)
            continue;
        next = moveArray[movesIndex++];
        piece = getPos(next);
        if (piece != noPiece) {
            if (piece == whiteBishop || piece == whiteQueen || piece == whiteKing) // check first square for king also
                return true;
            movesIndex = nextSectionIndex;
            continue;
        }
        while (movesIndex != nextSectionIndex) {
            next = moveArray[movesIndex++];
            piece = getPos(next);
            if (piece != noPiece) {
                if (piece == whiteBishop || piece == whiteQueen) // check rest for only bishop and queen
                    return true;
                movesIndex = nextSectionIndex;
                break;
            }
        }
    }

    // rook directions
    for (int i = 0; i < 4; i++) {
        nextSectionIndex = moveArray[movesIndex++]; // next direction
        if (movesIndex == nextSectionIndex)
            continue;
        next = moveArray[movesIndex++];
        piece = getPos(next);
        if (piece != noPiece) {
            if (piece == whiteRook || piece == whiteQueen || piece == whiteKing) // check first square for king also
                return true;
            movesIndex = nextSectionIndex;
            continue;
        }
        while (movesIndex != nextSectionIndex) {
            next = moveArray[movesIndex++];
            piece = getPos(next);
            if (piece != noPiece) {
                if (piece == whiteRook || piece == whiteQueen) // check rest for only rook and queen
                    return true;
                movesIndex = nextSectionIndex;
                break;
            }
        }
    }

    // knight moves
    nextSectionIndex = moveArray[movesIndex++];
    while (movesIndex != nextSectionIndex) {
        next = moveArray[movesIndex++];
        if (getPos(next) == whiteKnight)
            return true;
    }

    // pawn moves
    if ((kingPos & 0b111) != 0) {
        if (getPos(kingPos + 7) == whitePawn)
            return true;
    }
    if ((kingPos & 0b111) != 7) {
        if (getPos(kingPos + 9) == whitePawn)
            return true;
    }

    return false;
}

bool Board::isPosWhite(int pos) {
    return getPos(pos) > 0;
}

bool Board::isValidMove(Move m) {
    vector<Move> *moves = getAllValidMoves();
    for (Move x : *moves) {
        if (x.to == m.to && x.from == m.from)
            return true;
    }

    return false;
}

void __attribute__((noinline)) Board::getAllSimpleMoves(vector<Move> *moves) {
    for (int pos = 0; pos < 64; pos++)
        getMovesForPiece(moves, pos);
}

vector<Move> * Board::getAllValidMoves() {
    if (validMoves.empty()) {
        getAllSimpleMoves(&validMoves);

        Board newBoard;
        for (int i = 0; i < validMoves.size(); i++) {
            newBoard.quickCopy(this);
            newBoard.quickDoMove(validMoves[i]);
            // quickDoMove does not toggle player turns,
            // so isCheck is checking if the player to move is in check
            if (newBoard.isCheck()) {
                validMoves.erase(validMoves.begin() + i);
                i--;
            }
        }
    }

    return &validMoves;
}

void Board::getMovesForPiece(vector<Move> *moves, int pos) {
    // if piece color is different from current turn, return
    char piece = getPos(pos);
    if (piece == noPiece || piece > 0 != isWhitesTurn)
        return;

    // abs switches black pieces to white
    switch (abs(piece)) {
        case whiteKing:
            getKingMoves(moves, pos);
            break;
        case whiteQueen:
            getQueenMoves(moves, pos);
            break;
        case whiteRook:
            getRookMoves(moves, pos);
            break;
        case whiteBishop:
            getBishopMoves(moves, pos);
            break;
        case whiteKnight:
            getKnightMoves(moves, pos);
            break;
        case whitePawn:
            getPawnMoves(moves, pos);
            break;
    }
}

bool Board::posOnBoard(int pos) {
    return pos >= 0 && pos <= 63;
}

bool Board::isSquareAvailable(int pos, bool isWhite) {
    char piece = getPos(pos);
    return posOnBoard(pos) && (piece == noPiece || (piece > 0 != isWhite));
}

// TODO: should not be able to castle through / out of checks
void Board::getKingMoves(vector<Move> *moves, int pos) {
    bool isWhite = isPosWhite(pos);
    int next;
    for (int i = -1; i < 2; i++) {
        for (int j = -1; j < 2; j++) {
            if (i != 0 || j != 0) {
                next = pos + (i * 8) + j;
                if (abs((next & 0b111) - (pos & 0b111)) <= 1) {
                    if (isSquareAvailable(next, isWhite))
                        moves->push_back((Move) {pos, next});
                }
            }
        }
    }
    if (isWhite) {
        if (whiteKingSideCastle &&
            getPos(61) == noPiece &&
            getPos(62) == noPiece &&
            getPos(63) == whiteRook)
        {
            moves->push_back((Move) {pos, 62});
        }
        if (whiteQueenSideCastle &&
            getPos(56) == whiteRook &&
            getPos(57) == noPiece &&
            getPos(58) == noPiece &&
            getPos(59) == noPiece)
        {
            moves->push_back((Move) {pos, 58});
        }
    }
    else {
        if (blackKingSideCastle &&
            getPos(5) == noPiece &&
            getPos(6) == noPiece &&
            getPos(7) == blackRook)
        {
            moves->push_back((Move) {pos, 6});
        }
        if (blackQueenSideCastle &&
            getPos(0) == blackRook &&
            getPos(1) == noPiece &&
            getPos(2) == noPiece &&
            getPos(3) == noPiece)
        {
            moves->push_back((Move) {pos, 2});
        }
    }
}

void Board::getQueenMoves(vector<Move> *moves, int pos) {
    getRookMoves(moves, pos);
    getBishopMoves(moves, pos);
}

void Board::getRookMoves(vector<Move> *moves, int pos) {
    bool isWhite = isPosWhite(pos);
    int next;
    for (next = pos + 1; (next & 0b111) != 0; next++) {
        if (isSquareAvailable(next, isWhite)) {
            moves->push_back((Move) {pos, next});
            if (getPos(next) != noPiece)
                break;
        } else {break;}
    }
    for (next = pos - 1; (next & 0b111) != 7; next--) {
        if (isSquareAvailable(next, isWhite)) {
            moves->push_back((Move) {pos, next});
            if (getPos(next) != noPiece)
                break;
        } else {break;}
    }
    for (next = pos + 8; ; next += 8) {
        if (isSquareAvailable(next, isWhite)) {
            moves->push_back((Move) {pos, next});
            if (getPos(next) != noPiece)
                break;
        } else { break; }
    }
    for (next = pos - 8; ; next -= 8) {
        if (isSquareAvailable(next, isWhite)) {
            moves->push_back((Move) {pos, next});
            if (getPos(next) != noPiece)
                break;
        } else {break;}
    }
}

void Board::getBishopMoves(vector<Move> *moves, int pos) {
    bool isWhite = isPosWhite(pos);
    int next;
    for (next = pos + 9; (next & 7) != 0; next += 9) {
        if (isSquareAvailable(next, isWhite)) {
            moves->push_back((Move) {pos, next});
            if (getPos(next) != noPiece)
                break;
        } else {break;}
    }
    for (next = pos + 7; (next & 7) != 7; next += 7) {
        if (isSquareAvailable(next, isWhite)) {
            moves->push_back((Move) {pos, next});
            if (getPos(next) != noPiece)
                break;
        } else {break;}
    }
    for (next = pos - 9; (next & 7) != 7; next -= 9) {
        if (isSquareAvailable(next, isWhite)) {
            moves->push_back((Move) {pos, next});
            if (getPos(next) != noPiece)
                break;
        } else {break;}
    }
    for (next = pos - 7; (next & 7) != 0; next -= 7) {
        if (isSquareAvailable(next, isWhite)) {
            moves->push_back((Move) {pos, next});
            if (getPos(next) != noPiece)
                break;
        } else {break;}
    }
}

void Board::getKnightMoves(vector<Move> *moves, int pos) {
    bool isWhite = isPosWhite(pos);
    int next;
    for (int i = 0; i < 8; i++) {
        next = pos + knightOffsets[i];
        if (abs((next & 0b111) - (pos & 0b111)) <= 2) {
            if (isSquareAvailable(next, isWhite))
                moves->push_back((Move) {pos, next});
        }
    }
}

void Board::getPawnMoves(vector<Move> *moves, int pos) {
    bool isWhite = isPosWhite(pos);
    int offset;
    bool onStartingRank;
    if (isWhite) {
        offset = -8;
        onStartingRank = pos >= 48;
    }
    else {
        offset = 8;
        onStartingRank = pos <= 15;
    }
    // move 2 forward
    int next = pos + offset * 2;
    if (onStartingRank && getPos(next) == noPiece && getPos(pos + offset) == noPiece)
        moves->push_back((Move) {pos, next});
    // move 1 forward
    next = pos + offset;
    if (posOnBoard(next) && getPos(next) == noPiece) {
        Move m = {pos, next};
        if (next <= 7 || next >= 56) {
            m.flags = whiteQueen; moves->push_back(m);
            m.flags = whiteRook; moves->push_back(m);
            m.flags = whiteBishop; moves->push_back(m);
            m.flags = whiteKnight; moves->push_back(m);
        } else
            moves->push_back(m);
    }


    // capture left and right (and en passant)
    if ((pos & 0b111) != 0) {
        next = pos + offset - 1;
        if ((getPos(next) != noPiece && isPosWhite(next) != isWhite) ||
            (lastMove.to == pos - 1 &&
             lastMove.from >> 3 == (pos + offset * 2) >> 3 &&
             abs(getPos(lastMove.to)) == whitePawn)
             )
        {
            Move m = {pos, next};
            if (next <= 7 || next >= 56) {
                m.flags = whiteQueen; moves->push_back(m);
                m.flags = whiteRook; moves->push_back(m);
                m.flags = whiteBishop; moves->push_back(m);
                m.flags = whiteKnight; moves->push_back(m);
            } else
                moves->push_back(m);
        }
    }
    if ((pos & 0b111) != 7) {
        next = pos + offset + 1;
        if ((getPos(next) != noPiece && isPosWhite(next) != isWhite) ||
            (lastMove.to == pos + 1 &&
             lastMove.from >> 3 == (pos + offset * 2) >> 3 &&
             abs(getPos(lastMove.to)) == whitePawn)
                )
        {
            Move m = {pos, next};
            if (next <= 7 || next >= 56) {
                m.flags = whiteQueen; moves->push_back(m);
                m.flags = whiteRook; moves->push_back(m);
                m.flags = whiteBishop; moves->push_back(m);
                m.flags = whiteKnight; moves->push_back(m);
            } else
                moves->push_back(m);
        }
    }
}

int Board::getPieceValue(char piece) {
    switch (piece) {
        case whiteKing:
        case blackKing:
        case noPiece:
            return 0;

        case whiteQueen:
            return 9;
        case whiteRook:
            return 5;
        case whiteBishop:
            return 3;
        case whiteKnight:
            return 3;
        case whitePawn:
            return 1;

        case blackQueen:
            return -9;
        case blackRook:
            return -5;
        case blackBishop:
            return -3;
        case blackKnight:
            return -3;
        case blackPawn:
            return -1;
    }

    return 0;
}

int Board::getMaterialDiff() {
    int sum = 0;
    for (int pos = 0; pos < 64; pos++) {
        sum += getPieceValue(getPos(pos));
    }
    return sum;
}

bool Board::getIsWhitesTurn() {
    return isWhitesTurn;
}
